<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://sanjayankur31.github.io/planet-neuroscience">
	<title>Planet Neuroscience</title>
	<link>http://sanjayankur31.github.io/planet-neuroscience</link>
	<description>Planet Neuroscience - http://sanjayankur31.github.io/planet-neuroscience</description>
	<atom:link rel="self" href="http://sanjayankur31.github.io/rss10.xml" type="application/rss+xml"/>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="tag:ankursinha.in,2016-10-17:blog/2016/10/17/on-jargon.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-09-02:blog/2016/09/02/using-neuron-part-ii.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-08-27:blog/2016/08/27/quickly-scripting-a-grid-search-for-parameter-tuning.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-08-05:blog/2016/08/05/using-neuron-part-i.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-08-04:blog/2016/08/04/tinkering-with-openlayers-and-js-cajal-a-hacked-up-neuroscience-research-map.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-06-02:blog/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-05-31:blog/2016/05/31/some-tips-and-tricks-for-running-simulations-on-a-cluster.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-03-05:blog/2016/03/05/calliope-helping-you-keep-a-diary-in-latex.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-03-02:blog/2016/03/02/sli-vim-syntax-file-for-the-nest-simulators-sli-language.html" />
			<rdf:li rdf:resource="tag:ankursinha.in,2016-02-28:blog/2016/02/28/new-zaphod-release-v0-5-7.html" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="tag:ankursinha.in,2016-10-17:blog/2016/10/17/on-jargon.html">
	<title>Ankur Sinha: On jargon</title>
	<link>http://ankursinha.in/blog/2016/10/17/on-jargon.html</link>
	<content:encoded>&lt;p&gt;Jargon is more often than not looked at unfavourably. Jargon is just the &quot;language of a trade&quot; and so, by itself, I don't see why I should denounce it. Rather, to me, it is the usage of jargon that is the issue. If you think of a workplace where people are aware of the context and meaning of certain jargon, I see no reason why it isn't appropriate usage. In fact, in such scenarios, jargon makes conversation efficient since the parties must not needlessly simplify their communications. So, when I go over to my lab mate's desk and say &quot;&lt;em&gt;well, the STDP rule doesn't seem to result in an AI state&lt;/em&gt;&quot;, he knows exactly what I mean. I'd find it quite difficult to rephrase that sentence to make it any simpler. The same applies for most professions if not all of them. Whether it's farming or mechanics; IT or medicine; cooking or sewing; designing or the media; they will all have some specialised terminology. It is just normal evolution of language in the same way that &quot;selfie&quot; is now a word. Jargon is simply a set of words that encapsulate concepts that are frequently used in a context.&lt;/p&gt;
&lt;p&gt;So why are we up in arms about jargon, then? Why is everyone continuously talking about how we need to cut it out? Quite simply, because when jargon is used in the wrong scenario, it hampers transfer of information. If work related terminology is used in a social setting where other listeners are not privy to it, for example, the conversation does not serve to pass on any material. Furthermore, it usually has the effect of making the audience feel out of place. It is quite similar to speaking to a single member of a group in a language that the others do not comprehend. It is considered impolite.&lt;/p&gt;
&lt;p&gt;To take it a step further, jargon seems to be used frequently with the malintent to obfuscate - especially in sales and marketing. The idea seems to be to coin and use fancy wording to trick consumers into buying products. The billboards and slogans that we see on a daily basis while not untrue, are not always created with aim to elucidate facts.&lt;/p&gt;
&lt;p&gt;Another use of jargon is straightforward snobbery. It makes the snob feel like part of an exclusive club. There isn't much to say about this other than that one should simply not engage with such individuals.&lt;/p&gt;
&lt;p&gt;Scenarios where the use of jargon is unintentional are more complex to deal with. Most research falls in this category. Consider people like me who spend a majority of their time in an environment that requires the use of an uncommon vocabulary. So, I read research papers that contain specific words, I write papers using these same words, the discussions I partake in utilise these too - this jargon is quite unavoidable to a large extent in work life. I'm only 2 years into my Ph.D. and I find it hard to speak about the same subject matter without employing the same dialect already. While this does not affect my daily activities as they are limited to colleagues who are well versed in our diction, it greatly limits my ability to spread the science I work in to a wider audience. This, in contrast, does effect me, and you too. If we're not working similar areas, we have very little understanding of each other's work.&lt;/p&gt;
&lt;p&gt;While I can't speak for types of work, this, in general, is an issue in research and academia - the lack of ability in us researchers to disseminate our work to people in other streams, especially non research careers, is an accepted weakness.&lt;/p&gt;
&lt;p&gt;Computational neuroscience, for example, is extremely multidisciplinary. At my lab alone, we have biologists, physicist, mathematicians, and us computer scientists, all working under the same roof on similar research questions. The dialect each of us speak is different. Yet, we read and publish in the same channels. When I read a paper that is heavy on biological detail, I find it much harder because the text utilises biological terminology that I'm not well aware of. In our case, though, there's only the one solution of learning what we need to know. It is how we manage to collaborate across disciplines, and it takes work - the difference in jargon ever so slightly increasing the required exertions.&lt;/p&gt;
&lt;p&gt;Extend this scenario to someone who isn't working in computational neuroscience at all. Of course, it'll be even harder for them to understand the same text. Given how important research is for all life in general, it is imperative that people who do not conduct research be made aware of progress that is continuously made. If you don't understand why research is important, let me point out to you that &lt;em&gt;every&lt;/em&gt; manufactured product you use in your home is the end result of some research somewhere. Take a moment to wonder how it all came about - it isn't magic; it is years of hard work and failure.&lt;/p&gt;
&lt;p&gt;To insure the future of research, it is important that young students are exposed to it at an early age. It is the simplest way of arousing enough interest in them to guarantee that research receives a constant stream of capable bearers to build on past innovations. It really doesn't matter what they take up - contributions to each field count.&lt;/p&gt;
&lt;p&gt;It is also helpful for consumers to have some idea of how things are manufactured and the amount of work that goes into it. It helps them pick between brands and decide what price they should pay for a product. A general awareness helps build immunity to the different tricks in use today that gently nudge consumers into buying products - creating demand for a product that wasn't required some time before.&lt;/p&gt;
&lt;p&gt;A last but important note is that most research makes use of public funds that are obtained via government grants. If the tax payer is funding some research, the tax payer should know how the money is being utilised.&lt;/p&gt;
&lt;p&gt;So, yes, making research information easily accessible to everyone is of great value. This is where jargon stands out as quite a bottle neck. Individuals that are not aware of the context, or those that do not have the required background knowledge cannot be expected to read research papers to understand the state of knowledge. Rather, academics have to work towards simplifying the data to an extent that it can be consumed by individuals from all walks of life. This isn't easy, and simplification usually goes hand in hand with omission of lesser important details but it is certainly possible to synthesise an overall picture of a concept.&lt;/p&gt;
&lt;p&gt;What I've written isn't new by any standards. The problem is well known, and communities are working towards making knowledge more understandable. If you watch the stuff the BBC puts up, for example, you'll see a lot of work by individuals like &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Brian_Cox_(physicist)&quot;&gt;Professor Brian Cox&lt;/a&gt; that is aimed at explaining complex physical phenomena in simpler terms. A start has certainly been made.&lt;/p&gt;
&lt;p&gt;The point of this post was to give myself some time to think about the issue. After writing about a thousand words on the subject, I have a better understanding of it myself. I also have a better handle on what I should do to do my bit. It simply takes practice and some feedback. That's all it is. So, as I blog frequently about my Fedora related activities, I am going to make more of an attempt to write about my research too. A target is always helpful. Since it takes some effort at the moment, I'm going to set myself a target of one research related post every two to three weeks to begin with. Today being the 16th of October, I'll publish the first one before the 7th of November. Let's see how that goes.&lt;/p&gt;</content:encoded>
	<dc:date>2016-10-17T07:26:30+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-09-02:blog/2016/09/02/using-neuron-part-ii.html">
	<title>Ankur Sinha: Using NEURON - Part II</title>
	<link>http://ankursinha.in/blog/2016/09/02/using-neuron-part-ii.html</link>
	<content:encoded>&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://senselab.med.yale.edu/ModelDB/ModelList.cshtml?id=1882&quot;&gt;ModelDB&lt;/a&gt; is a popular resource where the computational neuroscience community puts up models that were used in various publications. Since I'm quite new to &lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/&quot;&gt;NEURON&lt;/a&gt;, I thought I'd play with some existing models to get a hang of things. Here I document how to run an existing model.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://senselab.med.yale.edu/ModelDB/ModelList.cshtml?id=1882&quot;&gt;ModelDB&lt;/a&gt; has quite a few models that use &lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/&quot;&gt;NEURON&lt;/a&gt;. Find one that suits you. I'll pick &lt;a class=&quot;reference external&quot; href=&quot;https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=139653&quot;&gt;L5b PC model constrained for BAC firing and perisomatic current step firing (Hay et al., 2011)&lt;/a&gt; for now.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;download-the-model&quot;&gt;
&lt;h2&gt;Download the model&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://senselab.med.yale.edu/modeldb/eavBinDown.cshtml?o=139653&amp;amp;a=23&amp;amp;mime=application/zip&quot;&gt;Download the zip&lt;/a&gt; file from the model page to a convenient location. There's a link right on the top of the page. Extract it.&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;$ unzip L5bPCmodelsEH.zip
$ lash
total 668K
4.0K drwxr-xr-x. &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt; asinha asinha 4.0K Mar &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2013&lt;/span&gt; L5bPCmodelsEH
664K -rw-r-----. &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; asinha asinha 662K Sep  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; 13:55 L5bPCmodelsEH.zip
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;building-and-running-the-model&quot;&gt;
&lt;h2&gt;Building and running the model&lt;/h2&gt;
&lt;p&gt;Enter the directory:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; L5bPCmodelsEH/
&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/&quot;&gt;NEURON&lt;/a&gt; code comprises of two sets of code files. You have the HOC files, and the NMODL files. NMODL files need to be compiled before the model can be run.&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;$ ~/dump/neuron-installation/x86_64/bin/nrnivmodl mod
Creating x86_64 directory &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; .o files.

/home/asinha/dump/neuron-blog/L5bPCmodelsEH
mod/CaDynamics_E2.mod mod/Ca_HVA.mod mod/Ca_LVAst.mod mod/epsp.mod mod/Ih.mod mod/Im.mod mod/K_Pst.mod mod/K_Tst.mod mod/Nap_Et2.mod mod/NaTa_t.mod mod/NaTs2_t.mod mod/SK_E2.mod mod/SKv3_1.mod
CaDynamics_E2.mod Ca_HVA.mod Ca_LVAst.mod epsp.mod Ih.mod Im.mod K_Pst.mod K_Tst.mod Nap_Et2.mod NaTa_t.mod NaTs2_t.mod SK_E2.mod SKv3_1.mod
&lt;span class=&quot;s2&quot;&gt;&quot;/home/asinha/dump/neuron-installation/x86_64/bin/nocmodl&quot;&lt;/span&gt; CaDynamics_E2
Translating CaDynamics_E2.mod into CaDynamics_E2.c
Thread Safe
&lt;span class=&quot;s2&quot;&gt;&quot;/home/asinha/dump/neuron-installation/share/nrn/libtool&quot;&lt;/span&gt; --tag&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CC --mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I&lt;span class=&quot;s2&quot;&gt;&quot;/home/asinha/dump/neuron-installation/include/nrn&quot;&lt;/span&gt; -I&lt;span class=&quot;s2&quot;&gt;&quot;/home/asinha/dump/neuron-installation/x86_64/lib&quot;&lt;/span&gt;      -O2 -g -pipe -Wall -Werror&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format-security -Wp,-D_FORTIFY_SOURCE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; -fexceptions -fstack-protector-strong --param&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ssp-buffer-size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; -grecord-gcc-switches -specs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;generic -c -o CaDynamics_E2.lo CaDynamics_E2.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/home/asinha/dump/neuron-installation/include/nrn -I/home/asinha/dump/neuron-installation/x86_64/lib -O2 -g -pipe -Wall -Werror&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format-security -Wp,-D_FORTIFY_SOURCE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; -fexceptions -fstack-protector-strong --param&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ssp-buffer-size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; -grecord-gcc-switches -specs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;generic -c CaDynamics_E2.c  -fPIC -DPIC -o .libs/CaDynamics_E2.o
CaDynamics_E2.c:94:34: warning: missing braces around initializer &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-Wmissing-braces&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  static VoidFunc hoc_intfunc&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  ...
  ....
  ...
  ...
&lt;/pre&gt;
&lt;p&gt;You'll see a new &lt;code&gt;x86_64&lt;/code&gt; directory which contains the compiled code. Now, simply run &lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/&quot;&gt;NEURON&lt;/a&gt; as usual. If everything went well, the simulation will run:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;$ ~/dump/neuron-installation/x86_64/bin/nrngui mosinit.hoc
&lt;/pre&gt;
&lt;p&gt;Remember that you must run &lt;code&gt;nrngui&lt;/code&gt; in the directory where the &lt;code&gt;x86_64&lt;/code&gt; directory resides for &lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/&quot;&gt;NEURON&lt;/a&gt; to find it.&lt;/p&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-09-02T12:39:16+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-08-27:blog/2016/08/27/quickly-scripting-a-grid-search-for-parameter-tuning.html">
	<title>Ankur Sinha: Quickly scripting a grid-search for parameter tuning</title>
	<link>http://ankursinha.in/blog/2016/08/27/quickly-scripting-a-grid-search-for-parameter-tuning.html</link>
	<content:encoded>&lt;p&gt;A lot of models rely on different parameters. In my cortical models, these are usually variables like conductances of different sets of synapses, the sparsity of different synapse sets, learning rates of spike time dependent plasticity learning rules and so on. Given how finely tuned neuronal networks sometimes are, models don't depict the expected behaviours for the entire domain of parameter values. Instead, we often must find the right ranges of these parameters.&lt;/p&gt;
&lt;p&gt;In my simulations, I have some sets of synapses, and in my recent investigations, I needed to find the right &quot;balance&quot; between them. The standard way of going about this is to carry out an organised parameter search, what I think is referred to as a &quot;grid search&quot;. In a grid search, each point in the parameter space is tested to find the ranges where the required behaviour is simulated - really just simple brute force at play here. Now, since I have three parameters to test, my parameter space would be a three dimensional grid - the Cartesian product of the domains of the three parameters - &lt;code&gt;p1 x p2 x p3&lt;/code&gt;. For all possible ordered sets of p1, p2, and p3, I need to run my simulation - the number of possible combinations being &lt;code&gt;n(p1) x n(p2) x n(p3)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the cardinality of each set.&lt;/p&gt;
&lt;p&gt;Of course, I wrote myself a script. Modifying the parameters by hand and then queuing up all these simulations manually on the cluster would just take too much time.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-idea&quot;&gt;
&lt;h2&gt;The idea&lt;/h2&gt;
&lt;p&gt;It's a simple Python script, and this fits well with my &lt;a class=&quot;reference external&quot; href=&quot;http://ankursinha.in/blog/feeds/categories/20160531-some-tips-and-tricks-for-running-simulations-on-a-cluster.rst&quot;&gt;workflow&lt;/a&gt; (which intensively uses Git and scripts to queue jobs on the cluster). The idea is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;create a new Git branch for the grid search (so we keep things organised!)&lt;/li&gt;
&lt;li&gt;use a simple scripting language to iterate over the parameter space&lt;/li&gt;
&lt;li&gt;modify the parameters in the simulation source code&lt;/li&gt;
&lt;li&gt;create a new commit for each point in the parameter space&lt;/li&gt;
&lt;li&gt;queue up all these commits on the cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-script&quot;&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;I've used Python - you can use another scripting language that you prefer. I wouldn't recommend a shell script - even though it's powerful, handling arrays and floats and the sort is quite tedious in bash.&lt;/p&gt;
&lt;pre class=&quot;code Python literal-block&quot;&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
Copyright 2016 Ankur Sinha
Author: Ankur Sinha &amp;lt;sanjay DOT ankur AT gmail DOT com&amp;gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GridSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Set up your simulations for a grid search.


    This will modify the source in a branch, make changes, commit
    and then you can set these commits up on the cluster.
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Initialise.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/path/to/source/file/&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Print usage.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Usage:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python3 grid_search.py &amp;lt;branch&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Branch MUST be specified.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Set it up.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_increment&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_increment&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;param1 not found in dict. Exiting.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_increment&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_increment&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;param2 not found in dict. Exiting.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_increment&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_increment&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;param3 not found in dict. Exiting.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Run.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# checkout the branch&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;checkout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;grid_search-{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;sed_args_param1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;s/param1 = .*$/param1 = {}/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sed_args_param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;sed_args_param2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;s/param2 = .*$/param2 = {}/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sed_args_param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;sed_args_param3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;s/param3 = .*$/param3 = {}/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sed_args_param3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;commit_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;{} {} {} {}&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;checkout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GridSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# dictionary that holds the required grid ranges&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# specify min, max if want a grid search, else specify only one value&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# if you specify max, min, you must specify increment&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setup_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'param1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'param2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'param3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Since I'm calling &lt;code&gt;sed&lt;/code&gt; to modify my source and replace the parameter values, the only requirement here is that my source code needs to have the three lines (look at the regular expressions):&lt;/p&gt;
&lt;pre class=&quot;code Python literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;If all goes well, you should have a new branch:&lt;/p&gt;
&lt;pre class=&quot;code console literal-block&quot;&gt;&lt;span class=&quot;go&quot;&gt;* 74866b6 - (3 months ago) Bugfix - neurons first, synapses later — Ankur Sinha (Ankur Sinha Gmail)
| * fd6a7fa - (5 days ago) 2016-08-22 3.0 3.0 -30.0 — Ankur Sinha (Ankur Sinha Gmail) (origin/grid_search-2016-08-22, grid_search-2016-08-22)
| * 33c95be - (5 days ago) 2016-08-22 3.0 3.0 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 51f96c1 - (5 days ago) 2016-08-22 3.0 3.0 -20.0 — Ankur Sinha (Ankur Sinha Gmail)
| * e8c106e - (5 days ago) 2016-08-22 3.0 3.0 -15.0 — Ankur Sinha (Ankur Sinha Gmail)
| * eaa7341 - (5 days ago) 2016-08-22 3.0 3.0 -10.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 4597114 - (5 days ago) 2016-08-22 3.0 3.0 -5.0 — Ankur Sinha (Ankur Sinha Gmail)
| * a111e00 - (5 days ago) 2016-08-22 3.0 2.5 -30.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 5261f4b - (5 days ago) 2016-08-22 3.0 2.5 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
| * d10a686 - (5 days ago) 2016-08-22 3.0 2.5 -20.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 91bc10e - (5 days ago) 2016-08-22 3.0 2.5 -15.0 — Ankur Sinha (Ankur Sinha Gmail)
| * add5188 - (5 days ago) 2016-08-22 3.0 2.5 -10.0 — Ankur Sinha (Ankur Sinha Gmail)
| * c93c817 - (5 days ago) 2016-08-22 3.0 2.5 -5.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 8e779b9 - (5 days ago) 2016-08-22 3.0 2.0 -30.0 — Ankur Sinha (Ankur Sinha Gmail)
| * 9f67e1c - (5 days ago) 2016-08-22 3.0 2.0 -25.0 — Ankur Sinha (Ankur Sinha Gmail)
.....&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, with the help of some bash hacking I get a list of all the commits I need to queue up in a single line:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# list all commits reachable from grid_search.. branch but not from the base_branch
&lt;/span&gt;$ git log base_branch..grid_search-2016-08-22  --oneline &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -f1 -d&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tr &lt;span class=&quot;s2&quot;&gt;&quot;\n&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
fd6a7fa 33c95be 51f96c1 .. e8c106e eaa7341
&lt;/pre&gt;
&lt;p&gt;Then, I use the bash &lt;code&gt;for&lt;/code&gt; construct to queue them all up as before:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;$ &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; commit in fd6a7fa 33c95be 51f96c1 .. e8c106e eaa7341&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; ./start-job.sh &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$commit&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 32&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; sleep 1m&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Note - I used the &lt;code&gt;sleep&lt;/code&gt; command to space out each job by a minute. This is because my workflow uses folder names which are timestamps of when the job was queued up, like this: &lt;code&gt;201608121234&lt;/code&gt; (YYYYMMDDHHMM). So, I can't have two commits starting at the same minute.&lt;/p&gt;
&lt;p&gt;There are many ways of carrying out the same method. This is what I quickly came up with. &lt;a class=&quot;reference external&quot; href=&quot;http://scikit-learn.org&quot;&gt;Scikit&lt;/a&gt;, for example has &lt;a class=&quot;reference external&quot; href=&quot;http://scikit-learn.org/stable/modules/grid_search.html&quot;&gt;methods for grid search&lt;/a&gt;, but they don't gel well with my simulations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;postprocessing-all-this-data&quot;&gt;
&lt;h2&gt;Postprocessing all this data&lt;/h2&gt;
&lt;p&gt;I have a bunch of scripts for post processing too - this grid search had 36 simulations, the postprocessing is still trudging along. The bigger question is: is there a good way of visualising all these results? I've had to resort to a spreadsheet - but if you have any suggestions, please do let me know. I really haven't found a nice front-end that would let me log results to a database and visualise them - over time, over parameters and so on - does anyone know one? What do people use to keep track of all their data?&lt;/p&gt;
&lt;p&gt;Anyway, it's a long weekend here with Monday being a bank holiday. Enjoy the weekend, everyone!&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-08-27T09:10:04+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-08-05:blog/2016/08/05/using-neuron-part-i.html">
	<title>Ankur Sinha: Using NEURON - Part I</title>
	<link>http://ankursinha.in/blog/2016/08/05/using-neuron-part-i.html</link>
	<content:encoded>&lt;div class=&quot;section&quot; id=&quot;what-is-neuron&quot;&gt;
&lt;h2&gt;What is NEURON&lt;/h2&gt;
&lt;p&gt;From the &lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/what_is_neuron&quot;&gt;website&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NEURON is a simulation environment for modeling individual neurons and networks of neurons. It provides tools for conveniently building, managing, and using models in a way that is numerically sound and computationally efficient. It is particularly well-suited to problems that are closely linked to experimental data, especially those that involve cells with complex anatomical and biophysical properties.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;installing-neuron-on-fedora-24&quot;&gt;
&lt;h2&gt;Installing NEURON on Fedora 24&lt;/h2&gt;
&lt;p&gt;The first thing you do is install the simulator. I've been trying to build &lt;a class=&quot;reference external&quot; href=&quot;https://copr.fedorainfracloud.org/coprs/ankursinha/neuroscience-research/&quot;&gt;copr&lt;/a&gt; packages but they're not as simple as I'd have liked - the configurations that upstream uses for iv and neuron are outdated and require quite a bit of patching.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;download-the-sources&quot;&gt;
&lt;h3&gt;Download the sources&lt;/h3&gt;
&lt;p&gt;First, download the source files:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Make sure we're in the /home/&amp;lt;user&amp;gt; directory
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Make a new directory - use what you want but be consistent
&lt;/span&gt;mkdir -p dump/neuron

&lt;span class=&quot;c1&quot;&gt;# Another one for the installed files
# You can use /opt or /usr/local or any other directory
# Using a directory in your home folder doesn't require root access
&lt;/span&gt;mkdir -p dump/neuron-installation

&lt;span class=&quot;c1&quot;&gt;# Keep the sources here
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/dump/neuron

&lt;span class=&quot;c1&quot;&gt;# Install mercurial to checkout the neuron source code
&lt;/span&gt;sudo dnf install hg
&lt;span class=&quot;c1&quot;&gt;# Download the source code
# Can't build from the latest tar somehow.
# http://www.neuron.yale.edu/neuron/download/getdevel
&lt;/span&gt;hg clone http://www.neuron.yale.edu/hg/neuron/nrn

&lt;span class=&quot;c1&quot;&gt;# Check http://www.neuron.yale.edu/neuron/download/getstd for correct links
&lt;/span&gt;wget http://www.neuron.yale.edu/ftp/neuron/versions/v7.4/iv-19.tar.gz

&lt;span class=&quot;c1&quot;&gt;# Untar the source for iv - this seems to work
&lt;/span&gt;tar -xvf iv-19.tar.gz
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;prep&quot;&gt;
&lt;h3&gt;Prep&lt;/h3&gt;
&lt;p&gt;We need to build iv first. On Fedora 24, the default gcc flags include &lt;code&gt;-Wformat-security&lt;/code&gt; so a quick patch needs to be applied to iv to get it to build. The patch &lt;a class=&quot;reference external&quot; href=&quot;https://www.neuron.yale.edu/phpBB/viewtopic.php?f=20&amp;amp;t=3536&quot;&gt;has been reported here&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;code diff literal-block&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff -ur ../iv-18.orig/src/lib/IV-2_6/matcheditor.cpp ./src/lib/IV-2_6/matcheditor.cpp
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- ../iv-18.orig/src/lib/IV-2_6/matcheditor.cpp   2014-01-08 19:10:44.895487120 +1100
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ ./src/lib/IV-2_6/matcheditor.cpp   2014-01-08 19:11:05.949315579 +1100
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -82,7 +82,7 @@
&lt;/span&gt;         strncpy(buf, text-&amp;gt;Text(), length);
         while (length &amp;gt; 0) {
             buf[length] = '\0';
&lt;span class=&quot;gd&quot;&gt;-            if (sscanf(buf, pattern) == EOF) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            if (sscanf(buf, &quot;%s&quot;, pattern) == EOF) {
&lt;/span&gt;                 break;
             }
             --length;
&lt;/pre&gt;
&lt;p&gt;Copy the diff into a file and call it &lt;code&gt;iv-format-security.patch&lt;/code&gt;. Place this in the directory where you have the neuron sources (&lt;code&gt;~/dump/neuron&lt;/code&gt;).
To apply the patch, enter the uncompressed iv directory:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; iv
patch -p1 &amp;lt; ../iv-format-security.patch
&lt;span class=&quot;c1&quot;&gt;# On success, it'll say:
# patching file src/lib/IV-2_6/matcheditor.cpp&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Before we build either iv or neuron, we need to install the build dependencies:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Install dependencies from the standard repositories
&lt;/span&gt;sudo dnf install xorg-x11-server-devel chrpath libtiff-devel imake libX11-devel automake autoconf libtool libXext-devel ncurses-devel readline-devel Random123-devel Cython openmpi-devel
&lt;/pre&gt;
&lt;p&gt;I've left out Java - I have no intention of using the Java support. Instead of openmpi, you can also use mpich - that's up to you - replace &lt;code&gt;openmpi-devel&lt;/code&gt; with &lt;code&gt;mpich-devel&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;build&quot;&gt;
&lt;h3&gt;Build&lt;/h3&gt;
&lt;p&gt;Follow the instructions &lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/download/compile_linux&quot;&gt;here&lt;/a&gt;.
First we build iv:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# we're already in the iv source directory
# ./configure --help for all available options
# I use the default Fedora CFLAGS and CXXFLAGS
# You needn't use these
# rpm -E %optflags will tell you what the default ones on your system are
# echo $CFLAGS
# -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic
# echo $CXXFLAGS
# -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# iv doesn't build with -Wnarrowing which is also default, so we disable it
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -Wno-narrowing&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CXXFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -Wno-narrowing&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# configure, make, make install
&lt;/span&gt;./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/asinha/dump/neuron-installation/ --with-x
&lt;span class=&quot;c1&quot;&gt;# I have 24 processors, check to see how many you do
&lt;/span&gt;make -j24
make install
&lt;/pre&gt;
&lt;p&gt;Then, we build neuron&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../nrn
&lt;span class=&quot;c1&quot;&gt;# configure --help to see all options
# Enable MPI
&lt;/span&gt;module load mpi/openmpi-x86_64
&lt;span class=&quot;c1&quot;&gt;# More change to flags to get the thing to build
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -Wno-narrowing -std=c99 -D_POSIX_C_SOURCE=200809L&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CXXFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -Wno-narrowing -D_POSIX_C_SOURCE=200809L&quot;&lt;/span&gt;
./build.sh
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/asinha/dump/neuron-installation/ --with-x --with-paranrn --with-mpi --with-multisend --with-nrniv --with-iv&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/asinha/dump/neuron-installation
&lt;span class=&quot;c1&quot;&gt;# I have 24 processors, check to see how many you do
&lt;/span&gt;make -j24
make install
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;check&quot;&gt;
&lt;h3&gt;Check&lt;/h3&gt;
&lt;p&gt;Follow the instructions &lt;a class=&quot;reference external&quot; href=&quot;http://www.neuron.yale.edu/neuron/download/compile_linux&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; dump/neuron-installation/
find . -name &lt;span class=&quot;s2&quot;&gt;&quot;neurondemo&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# You'll get something like: ./x86_64/bin/neurondemo
&lt;/span&gt;./86_64/bin/neurondemo
&lt;span class=&quot;c1&quot;&gt;# Will give out something like:
# NEURON -- VERSION 7.5 (1454:2350fc838a79) 2016-08-01
# Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
# See http://neuron.yale.edu/neuron/credits
#
# loading membrane mechanisms from /home/asinha/dump/neuron-installation/share/nrn/demo/release/x86_64/.libs/libnrnmech.so
# Additional mechanisms from files
#  cabpump.mod cachan1.mod camchan.mod capump.mod invlfire.mod khhchan.mod mcna.mod nacaex.mod nachan.mod release.mod
# first instance of j
# first instance of itmp
# first instance of using_cvode_
# first instance of movie_frame_dur_
# first instance of realtime
# first instance of running_
# first instance of rtstart
# first instance of stdrun_quiet
# first instance of screen_update_invl
# first instance of tstop
# first instance of steps_per_ms
# first instance of nstep_steprun
# first instance of runStopAt
# first instance of runStopIn
# first instance of global_ra
# first instance of mapped_nrnmainmenu_
# first instance of v_init
# first instance of n_graph_lists
# first instance of i
# first instance of eventslow
# first instance of eventcount
# first instance of cnt
# oc&amp;gt;
#&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;post&quot;&gt;
&lt;h3&gt;Post&lt;/h3&gt;
&lt;p&gt;Last, we update the PATH and things so that everything works smoothly in the future. The docs suggest an &lt;code&gt;nrnenv&lt;/code&gt; file that can be sourced in the &lt;code&gt;.bashrc&lt;/code&gt; file. We'll just follow the suggested method.&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;cat &amp;gt;&amp;gt; ~/dump/neuron-installation/x86_64/bin/nrnenv &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt; EOF
export NRNINSTALLATION=&quot;\$HOME/dump/neuron-installation&quot;
export NRNCPU=&quot;x86_64&quot;
export PATH=&quot;\$PATH:\$NRNINSTALLATION/\$NRNCPU/bin&quot;

EOF&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and modify &lt;code&gt;.bashrc&lt;/code&gt; to source it:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;source /home/asinha/dump/neuron-installation/x86_64/bin/nrnenv&quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;
&lt;p&gt;Log out and back in, or source the file again: &lt;code&gt;source ~/.bashrc&lt;/code&gt;.  All the binaries for neuron should then be available to you:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;$ ls ~/dump/neuron-installation/x86_64/bin/
bbswork.sh   iclass  idraw  memacs        modlunit  mos2nrn2.sh  nocmodl  nrngui  nrniv_makefile  nrnmech_makefile  nrnoc_makefile  nrnpyenv.sh  set_nrnpyenv.sh
hel2mos1.sh  idemo   ivoc   mkthreadsafe  mos2nrn   neurondemo   nrnenv   nrniv   nrnivmodl       nrnoc             nrnocmodl       oc           sortspike

$ which idraw
~/dump/neuron-installation/x86_64/bin/idraw
$ which nrniv
~/dump/neuron-installation/x86_64/bin/nrniv
$ which nrnoc
~/dump/neuron-installation/x86_64/bin/nrnoc
$ which oc
~/dump/neuron-installation/x86_64/bin/oc
&lt;/pre&gt;
&lt;p&gt;I think that should be it! I've tested the instructions on my Fedora 24 machine but if you run into issues, drop a comment and I'll look into it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-08-05T12:24:48+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-08-04:blog/2016/08/04/tinkering-with-openlayers-and-js-cajal-a-hacked-up-neuroscience-research-map.html">
	<title>Ankur Sinha: Tinkering with OpenLayers and JS - Cajal - a hacked up neuroscience research map</title>
	<link>http://ankursinha.in/blog/2016/08/04/tinkering-with-openlayers-and-js-cajal-a-hacked-up-neuroscience-research-map.html</link>
	<content:encoded>&lt;p&gt;I was a bit fed up with the various minute issues my simulations kept throwing at me and decided I needed a distraction to keep me from completely burning out. Research is hard work, and sometimes we hit solid walls where no progress seems possible. I haven't hit one yet, but I was beginning to see that my performance had begun to drop. The simplest answer to this situation is to take a holiday - a change of scenery. Unfortunately, I haven't any plans to take one at the moment. I've never understood the appeal of wandering around crowded cities with throngs of tourists anyway. Instead, I decided to set my simulations aside for a few days and tinker with other things for a bit.&lt;/p&gt;
&lt;p&gt;I decided to take up a short &quot;passion project&quot;. It needed to be something that would keep me occupied for a few days at the most. I'd tinkered with &lt;a class=&quot;reference external&quot; href=&quot;http://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt; before and I'd been meaning to brush up on my &lt;a class=&quot;reference external&quot; href=&quot;https://www.javascript.com/&quot;&gt;JavaScript&lt;/a&gt; recently seeing as how it's become quite a dominant scripting language. So I thought up a simple web application that would use the two to do something useful.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;cajal&quot;&gt;
&lt;h2&gt;Cajal&lt;/h2&gt;
&lt;p&gt;To start with, the app needs to have a name. I've come up with some unique ones before (&lt;a class=&quot;reference external&quot; href=&quot;http://ankursinha.in/blog/tag/zaphod/&quot;&gt;Zaphod&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;http://ankursinha.in/blog/tag/calliope/&quot;&gt;Calliope&lt;/a&gt;). This time I decided to pay homage to &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Santiago_Ram%C3%B3n_y_Cajal&quot;&gt;Santiago Ramón y Cajal&lt;/a&gt; who is considered the father of modern neuroscience. There are multiple applications called Cajal already, but not too many of them seem to be related to neuroscience. Unique enough, then.&lt;/p&gt;
&lt;p&gt;Cajal is a simple web page that shows a world map. On this map are markers that denote different neuroscience laboratories. The markers are clickable, so when you click one of these, some information about the laboratory is displayed below the map - the principal investigator, the website address, and the sort. I've only managed to add a few laboratories to it now, but I've hosted a working demo &lt;a class=&quot;reference external&quot; href=&quot;http://ankursinha.in/cajal-map/&quot;&gt;here&lt;/a&gt;. The screenshot below shows what it looks like.&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://ankursinha.in/blog/images/20160804-cajal.png&quot;&gt;&lt;img alt=&quot;Screenshot of Cajal web application&quot; class=&quot;align-center&quot; src=&quot;http://ankursinha.in/blog/images/20160804-cajal.png&quot; style=&quot;height: 400.0px;&quot; /&gt;&lt;/a&gt;
&lt;p&gt;The code is quite simple. The data is stored in a &lt;code&gt;yaml&lt;/code&gt; file at &lt;code&gt;data/groups.yaml&lt;/code&gt;. The Python script &lt;code&gt;bin/populate_map.py&lt;/code&gt; takes this file and generates a &lt;a class=&quot;reference external&quot; href=&quot;https://www.javascript.com/&quot;&gt;JavaScript&lt;/a&gt; file with functions to set up the map, overlay the markers, and assign them all &lt;code&gt;singleclick&lt;/code&gt; events that display information - &lt;code&gt;js/cajal.js&lt;/code&gt;. The main &lt;code&gt;index.html&lt;/code&gt; file uses this JavaScript file to show a map and the markers with their associated information.&lt;/p&gt;
&lt;p&gt;Maybe there is a better, less hacky, way of going about it, but this works for a quick two day project. In the future, maybe I can use a server side database and so on - it depends on how much it needs to scale. I know my shared hosting account can't handle all that!&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sanjayankur31/cajal/&quot;&gt;source code is available on Github&lt;/a&gt;. To add more laboratories, entries need to be added to the &lt;code&gt;data/groups.yaml&lt;/code&gt; file - that's all. If you're a neuroscience researcher and want to add to the map, please open pull requests and I can then periodically regenerate the page as required.&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-08-04T17:49:08+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-06-02:blog/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html">
	<title>Ankur Sinha: Checking your LaTeX sources for spelling errors with Hunspell</title>
	<link>http://ankursinha.in/blog/2016/06/02/checking-your-latex-sources-for-spelling-errors-with-hunspell.html</link>
	<content:encoded>&lt;p&gt;I usually use &lt;a class=&quot;reference external&quot; href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt; and a &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Makefile&quot;&gt;Makefile&lt;/a&gt; when writing LaTeX documents. Even though &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/spell.html&quot;&gt;Vim does permit you to check your spellings&lt;/a&gt;, it's always nice to run the entire text through a standalone spell checker before passing your documents on to others.&lt;/p&gt;
&lt;p&gt;The workflow is quite simple. Once you've written your text, you commit your changes, and then you can use one of either &lt;a class=&quot;reference external&quot; href=&quot;http://aspell.net/&quot;&gt;Aspell&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;http://hunspell.github.io/&quot;&gt;Hunspell&lt;/a&gt; to check your text for spelling errors. Both provide an interactive interface that makes them easy to use.&lt;/p&gt;
&lt;p&gt;On &lt;a class=&quot;reference external&quot; href=&quot;http://getfedora.org&quot;&gt;Fedora&lt;/a&gt;, you can install them using &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;sudo dnf install aspell hunspell
&lt;/pre&gt;
&lt;p&gt;You'll also need to make sure you have the language files installed:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;sudo dnf install aspell-en hunspell-en
&lt;/pre&gt;
&lt;p&gt;Then, to check all your &lt;code&gt;.tex&lt;/code&gt; files, you can use something like this:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;find . -name &lt;span class=&quot;s2&quot;&gt;&quot;*.tex&quot;&lt;/span&gt; -exec aspell --lang&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en --mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tex check &lt;span class=&quot;s2&quot;&gt;&quot;{}&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Aspell
&lt;/span&gt;find . -name &lt;span class=&quot;s2&quot;&gt;&quot;*.tex&quot;&lt;/span&gt; -exec hunspell -t -i utf-8 &lt;span class=&quot;s1&quot;&gt;'{}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Hunspell&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I looked around a bit, and decided to use &lt;a class=&quot;reference external&quot; href=&quot;http://hunspell.github.io/&quot;&gt;Hunspell&lt;/a&gt;. It's used by LibreOffice, Firefox, and other applications. I commit my work first and then run the above command which opens a window like this:&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://ankursinha.in/blog/images/hunspell-example.png&quot;&gt;&lt;img alt=&quot;Hunspell screenshot&quot; src=&quot;http://ankursinha.in/blog/images/hunspell-example.png&quot; style=&quot;width: 750px;&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Once you've gone through it and made your changes, you can then use &lt;code&gt;git diff --word-diff&lt;/code&gt; to review your changes. If you'd like to undo some of them, use &lt;code&gt;git add -i&lt;/code&gt; and so on:&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://ankursinha.in/blog/images/git-word-diff.png&quot;&gt;&lt;img alt=&quot;Git diff screenshot&quot; src=&quot;http://ankursinha.in/blog/images/git-word-diff.png&quot; style=&quot;width: 750px;&quot; /&gt;&lt;/a&gt;
&lt;p&gt;That's it! Happy writing!&lt;/p&gt;</content:encoded>
	<dc:date>2016-06-02T10:42:00+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-05-31:blog/2016/05/31/some-tips-and-tricks-for-running-simulations-on-a-cluster.html">
	<title>Ankur Sinha: Some tips and tricks for running simulations on a cluster</title>
	<link>http://ankursinha.in/blog/2016/05/31/some-tips-and-tricks-for-running-simulations-on-a-cluster.html</link>
	<content:encoded>&lt;p&gt;To begin with, you must use a terminal multiplexer! I use &lt;a class=&quot;reference external&quot; href=&quot;http://byobu.org/&quot;&gt;Byobu with tmux&lt;/a&gt; to multiplex a single SSH session. I use it on all my machines. It's an excellent tool.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;monitoring-your-jobs&quot;&gt;
&lt;h2&gt;Monitoring your jobs&lt;/h2&gt;
&lt;p&gt;Three of my Byobu screens run these commands to monitor the queue and my jobs:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;watch -n &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; qstat main
watch -n &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; qstat -B
watch -n &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; /usr/local/maui/bin/showq -u asinha
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;showq&lt;/code&gt; may be installed elsewhere. Use &lt;code&gt;which showq&lt;/code&gt; to locate it. More information on the commands can be found in their manuals:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;man watch
man qstat
&lt;/pre&gt;
&lt;p&gt;Remember, to find a man page, you can use the &lt;code&gt;apropos&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;I run all my simulations in a specific directory on the shared data disk. I usually also monitor this folder. It gives me an idea of how much my simulations have progressed. Something like this works:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;watch -n &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'du -sch *'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# in the directory that stores simulation results*&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;use-git&quot;&gt;
&lt;h2&gt;Use Git&lt;/h2&gt;
&lt;p&gt;Of course. If you make frequent changes, you must use a version control system. I stick to &lt;code&gt;git&lt;/code&gt; myself. You can use &lt;code&gt;svn&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt; if you wish - whatever floats your boat.&lt;/p&gt;
&lt;p&gt;An issue I've stumbled upon while working with the cluster is that the program you want it to run is not loaded into memory until your job begins to run. So, if you want to run a certain version of your program on the cluster, say some version_1, you must not make any changes to this version until the queued job has begun to run. This is extremely inconvenient, especially if you make frequent changes to your simulations, as is often the case in research. I would, for example, like to queue separate jobs in parallel for a myriad of tiny changes and then compare results.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class=&quot;reference external&quot; href=&quot;https://git-scm.com/docs/git-worktree&quot;&gt;git work-tree&lt;/a&gt;! The simplest solution to the aforementioned issue is to checkout different work-trees for commits you want to test and queue up jobs for each individually. This would work really well. Once the simulation finishes, you can remove the work-tree.&lt;/p&gt;
&lt;p&gt;Unfortunately, clusters usually run stable long term support oriented versions of Linux distributions - EL/CentOS/Scientific. As a result, it's quite probable that the version of git on the cluster doesn't support work-trees - as is the case with the cluster I use. I came up with a workaround which works somewhat like work-trees - I manually clone my source repository to a temporary location, checkout the commit I want to run (which is what work-trees sort of are), and set up a job that runs this particular simulation version. It uses two scripts:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;A template PBS script for the simulation run. This will be passed to &lt;code&gt;qsub&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A script that clones my repo, checks out the required commit, completes the template script, and calls &lt;code&gt;qsub&lt;/code&gt; to queue up the job.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first is a simple PBS script:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# File: run-sim.sh
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#PBS -l walltime=48:00:00
#PBS -l nodes=50
#PBS -m abe
#PBS -N nest_v_s
&lt;/span&gt;
module unload mpi/mpich-x86_64
module load mvapich2-1.7

&lt;span class=&quot;nv&quot;&gt;SIM_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/stri-data/asinha/simulations-nest/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SIM_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PROGRAM_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_TIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;/Sinha2016/src/Sinha2016.py&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RESULT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_TIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;/result/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NUM_NODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ------------------------------------------------------
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Job is running on nodes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; cat &lt;span class=&quot;nv&quot;&gt;$PBS_NODEFILE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ------------------------------------------------------
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: qsub is running on &lt;span class=&quot;nv&quot;&gt;$PBS_O_HOST&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: originating queue is &lt;span class=&quot;nv&quot;&gt;$PBS_O_QUEUE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: executing queue is &lt;span class=&quot;nv&quot;&gt;$PBS_QUEUE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: working directory is &lt;span class=&quot;nv&quot;&gt;$PBS_O_WORKDIR&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: execution mode is &lt;span class=&quot;nv&quot;&gt;$PBS_ENVIRONMENT&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: job identifier is &lt;span class=&quot;nv&quot;&gt;$PBS_JOBID&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: job name is &lt;span class=&quot;nv&quot;&gt;$PBS_JOBNAME&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: node file is &lt;span class=&quot;nv&quot;&gt;$PBS_NODEFILE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: current home directory is &lt;span class=&quot;nv&quot;&gt;$PBS_O_HOME&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; PBS: &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PBS_O_PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ------------------------------------------------------

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ANKUR&amp;gt;&amp;gt; Begun at &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_TIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ANKUR&amp;gt;&amp;gt; Script: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

mkdir -pv &lt;span class=&quot;nv&quot;&gt;$RESULT_PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RESULT_PATH&lt;/span&gt;

/usr/local/bin/mpiexec -n &lt;span class=&quot;nv&quot;&gt;$NUM_NODES&lt;/span&gt; python &lt;span class=&quot;nv&quot;&gt;$PROGRAM_PATH&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;END_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date +%Y%m%d%H%M&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ANKUR&amp;gt;&amp;gt; Ended at &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$END_TIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It sets up the required PBS options, then loads the MPI module I wish to use. It creates a directory where my simulation's results will be stored, enters it, and then uses &lt;code&gt;mpiexec&lt;/code&gt; to run my Python program.&lt;/p&gt;
&lt;p&gt;The second script is a wrapper that clones the required commit, sets up the correct paths in the above script and the calls &lt;code&gt;qsub&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# File: setup-job.sh
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SOURCE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/asinha/Documents/02_Code/00_repos/00_mine/Sinha2016/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GIT_COMMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SIM_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/stri-data/asinha/simulations-nest/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SIM_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date +%Y%m%d%H%M&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RUN_SCRIPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts/cluster/nest-runsim.sh&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RUN_NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NUM_NODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50
&lt;span class=&quot;nv&quot;&gt;CUR_SIM_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; queue_task
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        qsub &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; setup_env
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CUR_SIM_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_TIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This simulation will run in: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    mkdir -pv &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUR_SIM_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cloning source repository...&quot;&lt;/span&gt;
        git clone &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sinha2016&quot;&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sinha2016&quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Checking out commit &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt;
            git checkout -b this_sim &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Error occured. Could not checkout &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;. Exiting...&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyes&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  x&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ERROR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; -1
        &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;RUN_NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nest_&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;.sh&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Setting up &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt;
        cp &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_SCRIPT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -v
        sed -i &lt;span class=&quot;s2&quot;&gt;&quot;s|nest_v_s|nest_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_COMMIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        sed -i &lt;span class=&quot;s2&quot;&gt;&quot;s|nodes=.*|nodes=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUM_NODES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        sed -i &lt;span class=&quot;s2&quot;&gt;&quot;s|NUM_NODES=.*|NUM_NODES=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUM_NODES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        sed -i &lt;span class=&quot;s2&quot;&gt;&quot;s|SIM_TIME=.*|SIM_TIME=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIM_TIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RUN_NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; usage
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Queue up a job to run a particular git commit&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;lt;git_commit&amp;gt; &amp;lt;number_nodes&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$#&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Error occurred. Exiting...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Received &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$#&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; arguments. Expected: 3&quot;&lt;/span&gt;
    usage
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; -1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;GIT_COMMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NUM_NODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
setup_env
queue_task

&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; 0
&lt;/pre&gt;
&lt;p&gt;This takes two arguments, as the &lt;code&gt;usage&lt;/code&gt; function will tell you. The first argument is the commit you want to run the simulation for, and the second is the number of nodes you want to use. It'll clone your repository to a temporary location and checkout this specified commit. Then, it'll modify the first script &lt;code&gt;run-sim.sh&lt;/code&gt; to set up the correct path to the code and also correctly specify the number of nodes you'd want to request. Finally, once all this is done, it'll call &lt;code&gt;qsub run-sim.sh&lt;/code&gt; to queue up your job. I use unique date stamps as directory names to distinguish between simulation runs, but you can use another unique identifier.&lt;/p&gt;
&lt;p&gt;Now, this copy of your code, at the specified commit will be used for the job you've queued. You can merrily go about tinkering with the main source repo without affecting queued up jobs. Yay!&lt;/p&gt;
&lt;p&gt;Even though I've used Python here, you can use similar scripts for compiled languages. You'll simply have to compile your executable after you checkout the required commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-miscellaneous-stuff&quot;&gt;
&lt;h2&gt;Other miscellaneous stuff&lt;/h2&gt;
&lt;p&gt;My lab mate, Alex, recently introduced me to &lt;a class=&quot;reference external&quot; href=&quot;https://www.continuum.io/downloads&quot;&gt;Anaconda&lt;/a&gt;. It's a great tool for that lets you install packages in your user specific directory. It contains quite a few python and other related packages. No need to use &lt;code&gt;sudo&lt;/code&gt; with it, and you can use &lt;code&gt;pip&lt;/code&gt; etc. with it too. It even lets you set up virtual environments and things.&lt;/p&gt;
&lt;p&gt;I think that's it for today. I'll update the post with other things I find/learn as I continue my adventures with the cluster.&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-05-31T18:17:32+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-03-05:blog/2016/03/05/calliope-helping-you-keep-a-diary-in-latex.html">
	<title>Ankur Sinha: Calliope - helping you keep a diary - in LaTeX!</title>
	<link>http://ankursinha.in/blog/2016/03/05/calliope-helping-you-keep-a-diary-in-latex.html</link>
	<content:encoded>&lt;p&gt;Quite a few people write personal diaries - researchers tend to also keep research diaries where we note our generally brilliant ideas. I've used &lt;a class=&quot;reference external&quot; href=&quot;http://lifeograph.sourceforge.net/wiki/Main_Page&quot;&gt;Lifeograph&lt;/a&gt; for a number of years now. It's a great application with all the right features that a diary needs - chapters, tags, and  metrics. It doesn't quite work for a &lt;em&gt;research diary&lt;/em&gt;, though - it doesn't support maths notation for a start, and we really do write a lot of very complicated maths from time to time. (The kinds with lots of symbols you see in the films? Think &quot;&lt;a class=&quot;reference external&quot; href=&quot;http://www.imdb.com/title/tt0268978/&quot;&gt;A beautiful mind&lt;/a&gt;&quot;.)&lt;/p&gt;
&lt;p&gt;The simple solution, of course, is &lt;a class=&quot;reference external&quot; href=&quot;http://lifeograph.sourceforge.net/wiki/Main_Page&quot;&gt;LaTeX&lt;/a&gt;. &lt;a class=&quot;reference external&quot; href=&quot;http://lifeograph.sourceforge.net/wiki/Main_Page&quot;&gt;LaTeX&lt;/a&gt; is used extensively in academic writing. While it does have a reputation for being complex and complicated (&lt;a class=&quot;reference external&quot; href=&quot;http://english.stackexchange.com/questions/10459/what-is-the-difference-between-complicated-and-complex&quot;&gt;YES! There's a difference in the two words - they're not interchangeable!&lt;/a&gt;) at times, it is by far the best tool for academic writing. It has everything a researcher needs - citation support, can be customised to fit multiple format, and if you pair it with &lt;a class=&quot;reference external&quot; href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; you even have versioning and &lt;a class=&quot;reference external&quot; href=&quot;http://ankursinha.in/blog/tag/zaphod/&quot;&gt;change tracking&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;calliope&quot;&gt;
&lt;h2&gt;Calliope&lt;/h2&gt;
&lt;p&gt;I went looking for packages that may provide this functionality in &lt;a class=&quot;reference external&quot; href=&quot;http://lifeograph.sourceforge.net/wiki/Main_Page&quot;&gt;LaTeX&lt;/a&gt; but didn't quite find any that had a convenient workflow and so on. I ran into a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/mikhailklassen/research-diary-project&quot;&gt;this Github project&lt;/a&gt; instead, which is a set of templates and scripts that does quite a good job. I've forked it and made some improvements. There's now a single script that takes arguments, for example. I've also added support for indexing - which works similar to tagging - it'll generate a nice clickable index at the end of the document. Of course, I've given it a fancy name, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sanjayankur31/calliope&quot;&gt;Calliope, and put it up on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usage is quite straightforward:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;asinha@cs-as14aho-2-herts-ac-uk  00_research_diary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master %&lt;span class=&quot;o&quot;&gt;=)]&lt;/span&gt;$ ./calliope.sh -h
    usage: ./calliope.sh options

    Master script file that provides functions to maintain a journal using LaTeX.

    OPTIONS:
    -h  Show this message and quit

    -t  Add new entry &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; today

    -c  Compile today&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;s entry

    -a  &amp;lt;year&amp;gt;
        Year to generate anthology of

    -p  &amp;lt;year&amp;gt;
        Compile all entries in this year

    -s  &amp;lt;entry&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;yyyy-mm-dd&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        Compile specific entry
&lt;/pre&gt;
&lt;p&gt;This is what the directory structure looks like:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;asinha@cs-as14aho-2-herts-ac-uk  00_research_diary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master %&lt;span class=&quot;o&quot;&gt;=)]&lt;/span&gt;$ tree
.
├── calliope.sh
├── diary
│   ├── 2016
│   │   ├── 2016-03-04.tex
│   │   ├── 2016-03-05.tex
│   │   ├── images
│   │   ├── research_diary.sty -&amp;gt; ../../templates/research_diary.sty
│   │   └── stdp_connection_symmetric.h
│   └── research_diary.sty -&amp;gt; ../templates/research_diary.sty
├── pdfs
│   └── 2016
│       ├── 2016-03-04.pdf
│       └── 2016-03-05.pdf
├── README.rst
└── templates
    ├── entry.tex
    └── research_diary.sty

        &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; directories, &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt; files
&lt;/pre&gt;
&lt;p&gt;The script generates your source &lt;a class=&quot;reference external&quot; href=&quot;http://lifeograph.sourceforge.net/wiki/Main_Page&quot;&gt;LaTeX&lt;/a&gt; files and puts them in the folders in &lt;tt class=&quot;docutils literal&quot;&gt;diary/&lt;/tt&gt;. Then you write up and use the script to compile it - the generated pdfs are collected in the &lt;tt class=&quot;docutils literal&quot;&gt;pdfs/&lt;/tt&gt; folder. The script can also generate an anthology for a year you pick. The resultant pdf for a daily entry will look like this:&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://ankursinha.in/blog/images/20160305-Calliope.png&quot;&gt;&lt;img alt=&quot;Screenshot showing pdf generated by Calliope&quot; class=&quot;align-center&quot; src=&quot;http://ankursinha.in/blog/images/20160305-Calliope.png&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/a&gt;
&lt;p&gt;That's pretty much it. Commit your entry to Git and you're done.&lt;/p&gt;
&lt;p&gt;So, give it a go and please &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sanjayankur31/calliope/issues/&quot;&gt;file issues&lt;/a&gt; if you have any suggestions that would improve it.&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-03-05T14:07:52+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-03-02:blog/2016/03/02/sli-vim-syntax-file-for-the-nest-simulators-sli-language.html">
	<title>Ankur Sinha: sli.vim - syntax file for the NEST simulator's SLI language</title>
	<link>http://ankursinha.in/blog/2016/03/02/sli-vim-syntax-file-for-the-nest-simulators-sli-language.html</link>
	<content:encoded>&lt;p&gt;I've been reading some of &lt;a class=&quot;reference external&quot; href=&quot;http://nest-simulator.org&quot;&gt;NEST&lt;/a&gt;'s &lt;a class=&quot;reference external&quot; href=&quot;http://www.nest-simulator.org/quickref/&quot;&gt;SLI&lt;/a&gt; examples to understand the simulation better. I noticed that these files had no syntax highlighting at all which made the code difficult to read. I couldn't find a syntax highlighting file for Vim anywhere so I've begun writing my own. It isn't complete, and I'm sure it's buggy, but it already seems to make reading and writing SLI easier. Here's what it makes an SLI file look like:&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://ankursinha.in/blog/images/20160302-sli-vim.png&quot;&gt;&lt;img alt=&quot;Screenshot showing SLI syntax highlighting in Vim&quot; class=&quot;align-center&quot; src=&quot;http://ankursinha.in/blog/images/20160302-sli-vim.png&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/a&gt;
&lt;div class=&quot;section&quot; id=&quot;installation&quot;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;It's just a syntax file. You can drop it in &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~/.vim/syntax/&lt;/span&gt;&lt;/tt&gt; directory (on Linux) or you can use &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;pathogen&lt;/a&gt; and just clone the repository and so on. Once done, add this to your &lt;tt class=&quot;docutils literal&quot;&gt;vimrc&lt;/tt&gt; file:&lt;/p&gt;
&lt;pre class=&quot;code vim literal-block&quot;&gt;&lt;span class=&quot;k&quot;&gt;au&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;BufNewFile&lt;/span&gt; *.sli &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;sli
&lt;span class=&quot;k&quot;&gt;au&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; sli &lt;span class=&quot;k&quot;&gt;setl&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;foldenable&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;foldmethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;syntax&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The file is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sanjayankur31/sli.vim&quot;&gt;hosted on Github&lt;/a&gt;. Feel free to open issues, or even better, pull requests ;)&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-03-02T10:53:58+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>
<item rdf:about="tag:ankursinha.in,2016-02-28:blog/2016/02/28/new-zaphod-release-v0-5-7.html">
	<title>Ankur Sinha: New Zaphod release - v0.5.7</title>
	<link>http://ankursinha.in/blog/2016/02/28/new-zaphod-release-v0-5-7.html</link>
	<content:encoded>&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://ankursinha.in/blog/2016/02/13/zaphod-a-latex-change-tracking-tool.html&quot;&gt;I'd written about Zaphod recently&lt;/a&gt;. I've been making some tweaks to it - just some enhancements to the revision bit which will make it easier to use. The diff bit is still the same - I didn't see the need to make too many improvements there.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;new-revision-bits&quot;&gt;
&lt;h2&gt;New revision bits&lt;/h2&gt;
&lt;p&gt;Now, it looks like this when you start it up:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;asinha@cs-as14aho-2-herts-ac-uk  latex-changes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;201602281328-latexdiff-annotated&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -m paper.tex -s src
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/discussion.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/paper.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? 1-4/Q/q:
&lt;/pre&gt;
&lt;p&gt;The idea here is that the user should be able to pick what file they want to edit. Previously, Zaphod just went file after file.&lt;/p&gt;
&lt;p&gt;Once you pick a file, it'll look like this:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;....
Pick file to revise? 1-4/Q/q: &lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; src/discussion.tex &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt;
+++ Addition found +++
&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ection&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Discussion&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

Add a new file.

+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: y
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Addition accepted.

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; File src/discussion.tex revised and saved.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/paper.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? 1-3/Q/q:
&lt;/pre&gt;
&lt;p&gt;But, you can also make partial revisions. This is handy in situations where you have a long file and do not have the time to go over all of it at once. So, here's an example. I go over some changes, but I need to stop there for the moment:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; LaTeX files with annotations:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/paper.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/methods.tex

Pick file to revise? 1-3/Q/q: &lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; src/paper.tex &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt;
--- Deletion found ---
Tracking
--- Deletion found ---
Accept deletion? Y/N/Q/y/n/q: y
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Deletion accepted.

&lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; src/paper.tex &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt;
+++ Addition found +++
Visualising
+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: y
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Addition accepted.

&lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; src/paper.tex &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt;
+++ Addition found +++
&lt;span class=&quot;se&quot;&gt;\i&lt;/span&gt;nput&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;discussion&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

+++ Addition found +++
Accept addition? Y/N/Q/y/n/q: q
Save partial file? Y/N/y/n: y
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Some files still have latexdiff annotations:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/introduction.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/methods.tex

Generate pdf? Y/y/N/n: n
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Not generating pdf.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Following files have been revised &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;maybe partially&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/discussion.tex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; src/paper.tex

Commit current changes? Y/y/N/n: n
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Zaphod&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Exiting without committing.
&lt;/pre&gt;
&lt;p&gt;There's one catch here, though. Because I want to make absolutely sure that Zaphod doesn't make any changes &quot;by mistake&quot;, you'll have to either stash or commit these changes before you can run Zaphod again. This is just to be on the safer side. A better way would probably be for Zaphod to remember what files were partially revised, but I haven't implemented it at the moment. I'd actually just commit the changes - I mean, that's why we've got Git, right?&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;asinha@cs-as14aho-2-herts-ac-uk  latex-changes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;201602281328-latexdiff-annotated *&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;$ python3 ../zaphod/zaphod.py revise -m paper.tex -s src
Modifed or untracked files found.
git status output:
 M src/discussion.tex
 M src/paper.tex

Please stash or commit and rerun Zaphod.
&lt;/pre&gt;
&lt;p&gt;That's it. I think it's a lot easier to use now, and in this design addresses a lot more use cases than it did before.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sanjayankur31/zaphod/releases&quot;&gt;Give it a go&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sanjayankur31/zaphod/issues/new&quot;&gt;let me know&lt;/a&gt; if things break - I've tested it myself, but only on a mock document.&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2016-02-28T16:52:27+00:00</dc:date>
	<dc:creator>ankur</dc:creator>
</item>

</rdf:RDF>
